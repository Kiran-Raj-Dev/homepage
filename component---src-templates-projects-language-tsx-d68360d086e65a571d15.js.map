{"version":3,"file":"component---src-templates-projects-language-tsx-d68360d086e65a571d15.js","mappings":"+OAoBO,SAASA,EAAeC,GAAwB,IAAD,kBAClD,MAAO,CACHC,GAAID,EAAQE,KAAKD,GACjBE,KAAI,UAAEH,EAAQE,KAAKE,mBAAf,aAAE,EAA0BD,KAChCE,UAAS,UAAEL,EAAQE,KAAKE,mBAAf,aAAE,EAA0BC,UAAUC,KAAI,SAACC,GAAD,OAAsBF,EAAAA,EAAAA,IAAcE,MACvFC,SAAUC,SAAQ,UAACT,EAAQE,KAAKE,mBAAd,aAAC,EAA0BI,UAC7CE,aAAY,UAAEV,EAAQE,KAAKE,mBAAf,aAAE,EAA0BM,aACxCC,YAAW,UAAEX,EAAQE,KAAKE,mBAAf,aAAE,EAA0BO,YACvCC,KAAI,UAAEZ,EAAQE,KAAKE,mBAAf,aAAE,EAA0BQ,KAChCC,KAAI,UAAEb,EAAQE,KAAKE,mBAAf,aAAE,EAA0BS,KAChCC,MAAK,UAAEd,EAAQE,KAAKE,mBAAf,aAAE,EAA0BU,MACjCC,OAAOC,EAAAA,EAAAA,GAAQ,UAAChB,EAAQE,KAAKE,mBAAd,aAAC,EAA0BW,QAOlD,IAwBA,EAxBgD,SAACE,GAAD,OAC5C,uBAAKC,UCtCa,wCDuCbD,EAAME,SAASb,KAAI,SAAAN,GAAO,OAEvB,qBAAGoB,KAAMpB,EAAQa,KAAMQ,IAAG,GAAKrB,EAAQC,GAAMiB,UCxCpC,uCDyCL,uBAAKA,UCxCA,uCDyCD,uBAAKA,UCxCN,qCDyCK,gBAAC,EAAAI,EAAD,CAAaC,MAAOvB,EAAQe,MAAOS,IAAI,cACvC,uBAAKN,UCzCR,uCD0CQlB,EAAQK,UAAUC,KAAI,SAAAC,GAAQ,OAC3B,uBACIW,UC3CT,4CD4CSO,OAAOC,EAAAA,EAAAA,GAASnB,EAASoB,WACzBN,IAAG,GAAKrB,EAAQC,GAAKM,EAASN,UAK9C,0BAAKD,EAAQc,OACb,yBAAId,EAAQW,qB,4FEhChC,UAX0D,SAACM,GACvD,IAAME,EAAWF,EAAMW,KAAKC,kBAAkBC,MAAMxB,IAAIP,EAAAA,GAClDgC,EAAuBd,EAAMe,YAAYzB,SACzC0B,EAAoB5B,EAAAA,EAAAA,IAAc0B,GAExC,OACI,gBAAC,IAAD,CAAQG,QAAYD,EAAkBE,KAAvB,YAAwCC,KAAMH,EAAkBN,WAC3E,gBAAC,IAAD,CAAaR,SAAUA,IACvB,gBAAC,KAAD,CAAMD,UAAWmB,EAAAA,EAAaC,GAAG,aAAjC,qB,qDCfL,IAAMjC,EAAY,IAAIkC,IAAsB,CAC/C,CAAC,SAAU,CACPtC,GAAI,SACJkC,KAAM,SACNC,KAAM,oBACNT,UAAW,sBAEf,CAAC,MAAO,CACJ1B,GAAI,MACJkC,KAAM,MACNC,KAAM,wBACNT,UAAW,+BAEf,CAAC,aAAc,CACX1B,GAAI,aACJkC,KAAM,aACNC,KAAM,6BACNT,UAAW,oCAEf,CAAC,OAAQ,CACL1B,GAAI,OACJkC,KAAM,OACNC,KAAM,kBACNT,UAAW,uB,qBC9BJ,SAASD,EAASc,GAC7B,MAAQ,CACJC,UAAU,QAASD,EAAV,KACTE,gBAAgB,QAASF,EAAV,M,sFCFhB,IAAI3B,EAAO","sources":["webpack://gatsby-starter-hello-world/./src/components/project_list.tsx","webpack://gatsby-starter-hello-world/./src/styles/project_list.module.scss","webpack://gatsby-starter-hello-world/./src/templates/projects_language.tsx","webpack://gatsby-starter-hello-world/./src/utils/languages.tsx","webpack://gatsby-starter-hello-world/./src/utils/svg_mask.tsx","webpack://gatsby-starter-hello-world/./src/styles/projects.module.scss"],"sourcesContent":["import { getImage, GatsbyImage, IGatsbyImageData, ImageDataLike } from \"gatsby-plugin-image\";\nimport React from \"react\";\n\nimport * as styles from \"src/styles/project_list.module.scss\";\nimport { Language, languages } from \"src/utils/languages\";\nimport get_mask from \"src/utils/svg_mask\";\n\nexport type Project = {\n    id: number;\n    date: string;\n    languages: Language[];\n    priority: number;\n    dependencies: string[];\n    description: string;\n    slug: string;\n    link: string;\n    title: string;\n    thumb: IGatsbyImageData;\n}\n\nexport function gql_to_project(project: any): Project {\n    return {\n        id: project.node.id,\n        date: project.node.frontmatter?.date,\n        languages: project.node.frontmatter?.languages.map((language: string) => languages.get(language)),\n        priority: parseInt(project.node.frontmatter?.priority),\n        dependencies: project.node.frontmatter?.dependencies,\n        description: project.node.frontmatter?.description,\n        slug: project.node.frontmatter?.slug,\n        link: project.node.frontmatter?.link,\n        title: project.node.frontmatter?.title,\n        thumb: getImage(project.node.frontmatter?.thumb as ImageDataLike)!,\n    };\n}\n\ninterface ProjectListProps {\n    projects: Project[];\n}\nconst ProjectList: React.FC<ProjectListProps> = (props) =>\n    <div className={styles.projects}>\n        {props.projects.map(project =>\n            // TODO: can't link same project twice <- non-unique key\n            <a href={project.link} key={`${project.id}`} className={styles.project}>\n                <div className={styles.content}>\n                    <div className={styles.image}>\n                        <GatsbyImage image={project.thumb} alt=\"thumbnail\" />\n                        <div className={styles.overlay}>\n                            {project.languages.map(language =>\n                                <div\n                                    className={styles.language_icon}\n                                    style={get_mask(language.icon_mono)}\n                                    key={`${project.id}${language.id}`}\n                                ></div>\n                            )}\n                        </div>\n                    </div>\n                    <h3>{project.title}</h3>\n                    <p>{project.description}</p>\n                </div>\n            </a>\n        )}\n    </div>;\nexport default ProjectList;\n","// extracted by mini-css-extract-plugin\nexport var projects = \"project_list-module--projects--r5Yl-\";\nexport var project = \"project_list-module--project--s09uQ\";\nexport var content = \"project_list-module--content--X4RCX\";\nexport var image = \"project_list-module--image--sF6qu\";\nexport var overlay = \"project_list-module--overlay--XYwST\";\nexport var language_icon = \"project_list-module--language_icon--XgM-W\";","import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport { ProjectsLanguagePage } from \"./__generated__/projects-language-page\";\n\nimport Layout from \"src/components/layout\";\nimport ProjectList, { gql_to_project } from \"src/components/project_list\";\nimport * as styles from \"src/styles/projects.module.scss\";\nimport { languages } from \"src/utils/languages\";\n\ninterface ProjectsLanguageProps {\n    data: ProjectsLanguagePage;\n    // TODO: better type\n    pageContext: Record<string, any>;\n}\nconst ProjectsLanguage: React.FC<ProjectsLanguageProps> = (props) => {\n    const projects = props.data.allMarkdownRemark.edges.map(gql_to_project);\n    const selected_language_id = props.pageContext.language;\n    const selected_language = languages.get(selected_language_id)!;\n\n    return (\n        <Layout heading={`${selected_language.name} Projects`} icon={selected_language.icon_mono}>\n            <ProjectList projects={projects} />\n            <Link className={styles.link} to=\"/projects\">Other Projects</Link>\n        </Layout >);\n};\nexport default ProjectsLanguage;\n\nexport const query = graphql`\nquery ProjectsLanguagePage($language: [String]) {\n  allMarkdownRemark(\n    sort: {fields: frontmatter___priority, order: ASC}\n    filter: {frontmatter: {languages: {in: $language}}}\n  ) {\n    edges {\n      node {\n        id\n        frontmatter {\n          languages\n          priority\n          dependencies\n          slug\n          link\n          description\n          title\n          thumb {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED)\n            }\n          }\n          date(formatString: \"MMMM YYYY\")\n        }\n      }\n    }\n  }\n}\n`;\n","export type Language = {\n    id: string;\n    name: string;\n    icon: string;\n    icon_mono: string;\n};\n\nexport const languages = new Map<string, Language>([\n    [\"python\", {\n        id: \"python\",\n        name: \"Python\",\n        icon: \"/icons/python.svg\",\n        icon_mono: \"/icons/python.svg\"\n    }],\n    [\"cpp\", {\n        id: \"cpp\",\n        name: \"C++\",\n        icon: \"/icons/c-plusplus.svg\",\n        icon_mono: \"/icons/c-plusplus_mono.svg\"\n    }],\n    [\"typescript\", {\n        id: \"typescript\",\n        name: \"TypeScript\",\n        icon: \"/icons/typescript-icon.svg\",\n        icon_mono: \"/icons/typescript-icon_mono.svg\"\n    }],\n    [\"java\", {\n        id: \"java\",\n        name: \"java\",\n        icon: \"/icons/java.svg\",\n        icon_mono: \"/icons/java.svg\"\n    }],\n]);\n","export default function get_mask(url: string): object {\n    return ({\n        maskImage: `url(\"${url}\")`,\n        WebkitMaskImage: `url(\"${url}\")`,\n    });\n};\n","// extracted by mini-css-extract-plugin\nexport var link = \"projects-module--link--0AUwY\";"],"names":["gql_to_project","project","id","node","date","frontmatter","languages","map","language","priority","parseInt","dependencies","description","slug","link","title","thumb","getImage","props","className","projects","href","key","G","image","alt","style","get_mask","icon_mono","data","allMarkdownRemark","edges","selected_language_id","pageContext","selected_language","heading","name","icon","styles","to","Map","url","maskImage","WebkitMaskImage"],"sourceRoot":""}