{"version":3,"file":"component---src-templates-projects-language-tsx-c4a5cc2221df8a0721f3.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./src/components/heading.tsx","webpack://gatsby-starter-hello-world/./src/styles/heading.module.scss","webpack://gatsby-starter-hello-world/./src/styles/layout.module.scss","webpack://gatsby-starter-hello-world/./src/components/layout.tsx","webpack://gatsby-starter-hello-world/./src/components/project_list.tsx","webpack://gatsby-starter-hello-world/./src/styles/project_list.module.scss","webpack://gatsby-starter-hello-world/./src/templates/projects_language.tsx","webpack://gatsby-starter-hello-world/./src/utils/languages.tsx","webpack://gatsby-starter-hello-world/./src/utils/svg_mask.tsx","webpack://gatsby-starter-hello-world/./src/styles/projects.module.scss"],"sourcesContent":["import React from \"react\";\n\nimport * as styles from \"src/styles/heading.module.scss\";\n\ninterface HeadingProps {\n    heading: string;\n    icon?: string;\n}\nconst Heading: React.FC<HeadingProps> = (props) =>\n    <div className={styles.heading}>\n        <h1>\n            {props.heading}\n            {props.icon ? <span className={styles.icon} style={{ maskImage: `url(${props.icon})` }}></span> : undefined}\n        </h1>\n        <hr />\n    </div>\n\nexport default Heading;\n","// extracted by mini-css-extract-plugin\nexport var heading = \"heading-module--heading--2iUAG\";\nexport var icon = \"heading-module--icon--Kb+tp\";","// extracted by mini-css-extract-plugin\nexport var nav = \"layout-module--nav--ma0SR\";\nexport var nav_menu = \"layout-module--nav_menu--uoKLm\";\nexport var logo = \"layout-module--logo--9Ozid\";\nexport var hamburger = \"layout-module--hamburger--h7E0E\";\nexport var content = \"layout-module--content--u4In+\";\nexport var footer = \"layout-module--footer--4b3+4\";\nexport var emoji = \"layout-module--emoji--Mxypj\";\nexport var link = \"layout-module--link--8S4u4\";\nexport var waveAnimation = \"layout-module--wave-animation--mBJvQ\";","import { graphql, Link, useStaticQuery } from \"gatsby\";\nimport React from \"react\";\nimport { SiteInfo } from \"./__generated__/site-info\";\n\nimport Heading from \"src/components/heading\";\nimport \"src/styles/global.scss\";\nimport * as styles from \"src/styles/layout.module.scss\";\n\ninterface LayoutProps {\n    heading: string;\n    icon?: string;\n}\nconst Layout: React.FC<LayoutProps> = (props) => {\n    const data: SiteInfo = useStaticQuery(graphql`\nquery SiteInfo {\n  site {\n    siteMetadata {\n      linkedin {\n        name\n        link\n      }\n      email {\n        name\n        link\n      }\n      discord {\n        name\n        link\n      }\n      github {\n        name\n        link\n      }\n    }\n  }\n}\n    `);\n    const discord = data.site?.siteMetadata?.discord?.link as string;\n    const email = data.site?.siteMetadata?.email?.link as string;\n    const github = data.site?.siteMetadata?.github?.link as string;\n    const linkedin = data.site?.siteMetadata?.linkedin?.link as string;\n\n    return (\n        <div>\n            <nav className={styles.nav}>\n                <div className={styles.logo}>\n                    <h1>Christopher Besch</h1>\n                    <h2>Software Developer &mdash; Problem Solver</h2>\n                </div>\n                <div>\n                    <input type=\"checkbox\" id=\"nav_toggle\" />\n                    <label htmlFor=\"nav_toggle\" className={styles.hamburger}>&#9776;</label>\n                    <div className={styles.nav_menu}>\n                        <li><Link to=\"/\">Home</Link></li>\n                        <li><Link to=\"/projects\">Projects</Link></li>\n                        <li><Link to=\"/about\">About</Link></li>\n                        <li><Link to=\"/contact\">Contact</Link></li>\n                    </div>\n                </div>\n            </nav >\n\n            <div className={styles.content}>\n                <Heading heading={props.heading} icon={props.icon} />\n                {props.children}\n            </div>\n\n            <footer className={styles.footer}>\n                <ul>\n                    <li className={styles.link}><a href={github}>GitHub</a></li>\n                    <li className={styles.link}><a href={linkedin}>LinkedIn</a></li>\n                    <li className={styles.link}><a href={discord}>Discord</a></li>\n                    <li className={styles.link}><a href={email}>Mail</a></li>\n                    <li><p>&#169; 2021</p></li>\n                    <li className={styles.emoji}><p>ðŸ”—</p></li>\n                </ul>\n            </footer>\n        </div>\n    );\n}\nexport default Layout;\n","import { getImage, GatsbyImage, IGatsbyImageData, ImageDataLike } from \"gatsby-plugin-image\";\nimport React from \"react\";\n\nimport * as styles from \"src/styles/project_list.module.scss\";\nimport { Language, languages } from \"src/utils/languages\";\nimport get_mask from \"src/utils/svg_mask\";\n\nexport type Project = {\n    id: number;\n    date: string;\n    languages: Language[];\n    priority: number;\n    dependencies: string[];\n    description: string;\n    slug: string;\n    link: string;\n    title: string;\n    thumb: IGatsbyImageData;\n}\n\nexport function gql_to_project(project: any): Project {\n    return {\n        id: project.node.id,\n        date: project.node.frontmatter?.date,\n        languages: project.node.frontmatter?.languages.map((language: string) => languages.get(language)),\n        priority: parseInt(project.node.frontmatter?.priority),\n        dependencies: project.node.frontmatter?.dependencies,\n        description: project.node.frontmatter?.description,\n        slug: project.node.frontmatter?.slug,\n        link: project.node.frontmatter?.link,\n        title: project.node.frontmatter?.title,\n        thumb: getImage(project.node.frontmatter?.thumb as ImageDataLike)!,\n    };\n}\n\ninterface ProjectListProps {\n    projects: Project[];\n}\nconst ProjectList: React.FC<ProjectListProps> = (props) =>\n    <div className={styles.projects}>\n        {props.projects.map(project =>\n            // TODO: can't link same project twice <- non-unique key\n            <a href={project.link} key={`${project.id}`} className={styles.project}>\n                <div className={styles.content}>\n                    <div className={styles.image}>\n                        <GatsbyImage image={project.thumb} alt=\"thumbnail\" />\n                        <div className={styles.overlay}>\n                            {project.languages.map(language =>\n                                <div\n                                    className={styles.language_icon}\n                                    style={get_mask(language.icon_mono)}\n                                    key={`${project.id}${language.id}`}\n                                ></div>\n                            )}\n                        </div>\n                    </div>\n                    <h3>{project.title}</h3>\n                    <p>{project.description}</p>\n                </div>\n            </a>\n        )}\n    </div>;\nexport default ProjectList;\n","// extracted by mini-css-extract-plugin\nexport var projects = \"project_list-module--projects--r5Yl-\";\nexport var project = \"project_list-module--project--s09uQ\";\nexport var content = \"project_list-module--content--X4RCX\";\nexport var image = \"project_list-module--image--sF6qu\";\nexport var overlay = \"project_list-module--overlay--XYwST\";\nexport var language_icon = \"project_list-module--language_icon--XgM-W\";","import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport { ProjectsLanguagePage } from \"./__generated__/projects-language-page\";\n\nimport Layout from \"src/components/layout\";\nimport ProjectList, { gql_to_project } from \"src/components/project_list\";\nimport * as styles from \"src/styles/projects.module.scss\";\nimport { languages } from \"src/utils/languages\";\n\ninterface ProjectsLanguageProps {\n    data: ProjectsLanguagePage;\n    // TODO: better type\n    pageContext: Record<string, any>;\n}\nconst ProjectsLanguage: React.FC<ProjectsLanguageProps> = (props) => {\n    const projects = props.data.allMarkdownRemark.edges.map(gql_to_project);\n    const selected_language_id = props.pageContext.language;\n    const selected_language = languages.get(selected_language_id)!;\n\n    return (\n        <Layout heading={`${selected_language.name} Projects`} icon={selected_language.icon_mono}>\n            <ProjectList projects={projects} />\n            <Link className={styles.link} to=\"/projects\">Other Projects</Link>\n        </Layout >);\n};\nexport default ProjectsLanguage;\n\nexport const query = graphql`\nquery ProjectsLanguagePage($language: [String]) {\n  allMarkdownRemark(\n    sort: {fields: frontmatter___priority, order: ASC}\n    filter: {frontmatter: {languages: {in: $language}}}\n  ) {\n    edges {\n      node {\n        id\n        frontmatter {\n          languages\n          priority\n          dependencies\n          slug\n          link\n          description\n          title\n          thumb {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED)\n            }\n          }\n          date(formatString: \"MMMM YYYY\")\n        }\n      }\n    }\n  }\n}\n`;\n","export type Language = {\n    id: string;\n    name: string;\n    icon: string;\n    icon_mono: string;\n};\n\nexport const languages = new Map<string, Language>([\n    [\"python\", {\n        id: \"python\",\n        name: \"Python\",\n        icon: \"/icons/python.svg\",\n        icon_mono: \"/icons/python.svg\"\n    }],\n    [\"cpp\", {\n        id: \"cpp\",\n        name: \"C++\",\n        icon: \"/icons/c-plusplus.svg\",\n        icon_mono: \"/icons/c-plusplus_mono.svg\"\n    }],\n    [\"typescript\", {\n        id: \"typescript\",\n        name: \"TypeScript\",\n        icon: \"/icons/typescript-icon.svg\",\n        icon_mono: \"/icons/typescript-icon_mono.svg\"\n    }],\n    [\"java\", {\n        id: \"java\",\n        name: \"java\",\n        icon: \"/icons/java.svg\",\n        icon_mono: \"/icons/java.svg\"\n    }],\n]);\n","export default function get_mask(url: string): object {\n    return ({\n        maskImage: `url(\"${url}\")`,\n        webkitMaskImage: `url(\"${url}\")`,\n    });\n};\n","// extracted by mini-css-extract-plugin\nexport var link = \"projects-module--link--0AUwY\";"],"names":["props","className","heading","icon","style","maskImage","undefined","data","useStaticQuery","discord","site","siteMetadata","link","email","github","linkedin","type","id","htmlFor","to","children","styles","href","gql_to_project","project","node","date","frontmatter","languages","map","language","priority","parseInt","dependencies","description","slug","title","thumb","getImage","projects","key","G","image","alt","get_mask","icon_mono","allMarkdownRemark","edges","selected_language_id","pageContext","selected_language","name","Map","url","webkitMaskImage"],"sourceRoot":""}