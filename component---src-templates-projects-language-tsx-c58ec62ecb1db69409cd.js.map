{"version":3,"file":"component---src-templates-projects-language-tsx-c58ec62ecb1db69409cd.js","mappings":"iPA+BA,WAAeA,EAAAA,EAAAA,IAd2C,SAACC,GACvD,IAAMC,EAA4C,MAA7BD,EAAME,OAAOD,aAAuBE,SAASH,EAAME,OAAOD,cAA0BG,EAAAA,GAEnGC,EADeL,EAAMM,KAAKC,kBAAkBC,MAAMC,IAAIC,EAAAA,GAC9BC,QAAO,SAAAC,GAAO,OAAIA,EAAQC,UAAYZ,KAC9Da,EAAuBd,EAAMe,YAAYC,SACzCC,EAAoBC,EAAAA,EAAAA,IAAcJ,GAExC,OACI,gBAAC,IAAD,CAAQK,QAAYF,EAAkBG,KAAvB,YAAwCC,YAAqC,QAAxBP,EAAiC,4BAA8B,GAAIQ,KAAML,EAAkBM,WAC3J,gBAAC,IAAD,CAAaC,UAAWC,EAAAA,EAAiBpB,SAAUA,IACnD,gBAAC,KAAD,CAAMmB,UAAcE,EAAAA,EAAL,IAA0BA,EAAAA,EAAoBC,GAAG,aAAhE,kBACC1B,EAAe2B,EAAAA,GAA4B,gBAAC,KAAD,CAAMJ,UAAcE,EAAAA,EAAL,IAA0BA,EAAAA,EAAoBC,GAAE,aAAeV,EAAkBY,GAAjC,iBAAoDD,EAAAA,IAAnH,iBAAkKE","sources":["webpack://gatsby-starter-hello-world/./src/templates/projects_language.tsx"],"sourcesContent":["import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport { ProjectsLanguagePage } from \"./__generated__/projects-language-page\";\n\nimport Layout from \"src/components/layout\";\nimport ProjectList, { gql_to_project } from \"src/components/project_list\";\nimport * as styles from \"src/styles/projects.module.scss\";\nimport * as util_styles from \"src/styles/utils.module.scss\";\nimport { languages } from \"src/utils/languages\";\nimport { with_location, PropsWithLocation } from \"src/utils/with_location\";\nimport { max_priority_language_default, max_priority_language_all } from \"src/utils/consts\";\n\ninterface ProjectsLanguageProps extends PropsWithLocation {\n    data: ProjectsLanguagePage;\n    // TODO: better type\n    pageContext: Record<string, any>;\n}\nconst ProjectsLanguage: React.FC<ProjectsLanguageProps> = (props) => {\n    const max_priority = props.search.max_priority != null ? parseInt(props.search.max_priority as string) : max_priority_language_default;\n    const all_projects = props.data.allMarkdownRemark.edges.map(gql_to_project);\n    const projects = all_projects.filter(project => project.priority <= max_priority);\n    const selected_language_id = props.pageContext.language;\n    const selected_language = languages.get(selected_language_id)!;\n\n    return (\n        <Layout heading={`${selected_language.name} Projects`} sub_heading={selected_language_id == \"java\" ? \" You found an easter egg!\" : \"\"} icon={selected_language.icon_mono}>\n            <ProjectList className={styles.projects} projects={projects} />\n            <Link className={`${util_styles.block} ${util_styles.link}`} to=\"/projects\">Other Projects</Link>\n            {max_priority < max_priority_language_all ? <Link className={`${util_styles.block} ${util_styles.link}`} to={`/projects/${selected_language.id}?max_priority=${max_priority_language_all}`}>Show All</Link> : undefined}\n        </Layout >);\n};\nexport default with_location(ProjectsLanguage);\n\nexport const query = graphql`\nquery ProjectsLanguagePage($language: [String]) {\n  allMarkdownRemark(\n    sort: {fields: frontmatter___priority, order: ASC}\n    filter: {frontmatter: {languages: {in: $language}}}\n  ) {\n    edges {\n      node {\n        id\n        frontmatter {\n          languages\n          priority\n          dependencies\n          slug\n          link\n          description\n          title\n          thumb {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED)\n            }\n          }\n          date(formatString: \"MMMM YYYY\")\n        }\n      }\n    }\n  }\n}\n`;\n"],"names":["with_location","props","max_priority","search","parseInt","max_priority_language_default","projects","data","allMarkdownRemark","edges","map","gql_to_project","filter","project","priority","selected_language_id","pageContext","language","selected_language","languages","heading","name","sub_heading","icon","icon_mono","className","styles","util_styles","to","max_priority_language_all","id","undefined"],"sourceRoot":""}